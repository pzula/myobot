{
  "name": "dualshock-controller",
  "version": "0.6.7",
  "description": "node library for dual shock controllers",
  "main": "./lib/dualshock.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dependencies": {
    "node-hid": "^0.3",
    "colors": "^0.6",
    "joystick": "^0.1.1",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "grunt": "^0.4",
    "grunt-cli": "^0.1",
    "grunt-contrib-jshint": "^0.10",
    "grunt-contrib-watch": "^0.6",
    "grunt-mocha-test": "^0.10",
    "mocha": "^1.17",
    "sinon": "^1.8",
    "istanbul": "^0.2",
    "grunt-jsbeautifier": "^0.2.7",
    "jshint": "^2.5.0",
    "mockery": "^1.4.0"
  },
  "scripts": {
    "test": "grunt test",
    "coverage": "istanbul cover _mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rdepena/node-dualshock-controller.git"
  },
  "author": {
    "name": "ricardo de pena"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "ec07ab438dd6cd129000b285f33d8be7c59342b6",
  "keywords": [
    "ps3",
    "controller",
    "gamepad",
    "dualshock",
    "dualshock3",
    "dualshock4",
    "dual shock 3",
    "dual shock 4",
    "node-hid"
  ],
  "readme": "node-dualshock-controller\n=========================\n[![Build Status](https://travis-ci.org/rdepena/node-dualshock-controller.png?branch=master)](https://travis-ci.org/rdepena/node-dualshock-controller) [![Code Climate](https://codeclimate.com/github/rdepena/node-dualshock-controller.png)](https://codeclimate.com/github/rdepena/node-dualshock-controller)\n\n`dualshock-controller` is a node library that exposes events from a ps3 (ps4 partially supported) dualshock controller connected.\n\n## Installation:\n\n### Linux Requirements:\n\n    * libudev-dev\n\n### Run npm command:\n\n    $ npm install dualshock-controller\n\n\n\n## Guide\n\n###Connecting the controller\n\nObviously the controller needs to be connected but you can connect the dualshock controllers in two ways:\n\nVia Bluetooth: just make sure you pair with the controller via bluetooth.\n\nVia USB: once the controller is connected to the computer make sure you press the playstation button located in the center of the controller. Important: THE CONTROLLER WILL NOT SEND ANY DATA IF YOU DO NOT PRESS THE PS BUTTON.\n\n\n###Use the DualShock library\n\n~~~~ js\nvar dualShock = require('dualshock-controller');\n\n//pass options to init the controller.\nvar controller = dualShock(\n    {\n        //you can use a ds4 by uncommenting this line.\n        //config: \"dualshock4-generic-driver\",\n        //if using ds4 comment this line.\n        config : \"dualShock3\",\n        //smooths the output from the acelerometers (moving averages) defaults to true\n        accelerometerSmoothing : true,\n        //smooths the output from the analog sticks (moving averages) defaults to false\n        analogStickSmoothing : false\n    });\n\n//make sure you add an error event handler\ncontroller.on('error', function(data) {\n  //...someStuffDidNotWork();\n});\n\n//add event handlers:\ncontroller.on('left:move', function(data) {\n  //...doStuff();\n});\ncontroller.on('right:move', function(data) {\n  //...doStuff();\n});\ncontroller.on('connected', function(data) {\n  //...doStuff();\n});\ncontroller.on('square:press', function (data) {\n  //...doStuff();\n});\ncontroller.on('square:release', function (data) {\n  //...doStuff();\n});\n\n//sixasis motion events:\n//the object returned from each of the movement events is as follows:\n//{\n//    direction : values can be: 1 for right, forward and up. 2 for left, backwards and down.\n//    value : values will be from 0 to 120 for directions right, forward and up and from 0 to -120 for left, backwards and down.\n//}\n\n//right-left movement\ncontroller.on('rightLeft:motion', function (data) {\n    //...doStuff();\n});\n\n//forward-back movement\ncontroller.on('forwardBackward:motion', function (data) {\n    //...doStuff();\n});\n//up-down movement\ncontroller.on('upDown:motion', function (data) {\n    //...doStuff();\n});\n\n//controller status\n//as of version 0.6.2 you can get the battery %, if the controller is connected and if the controller is charging\ncontroller.on('battery:change', function (value) {\n     //...doStuff();\n});\ncontroller.on('connection:change', function (value) {\n     //...doStuff();\n});\ncontroller.on('charging:change', function (value) {\n     //...doStuff();\n});\n\n//connect the controller\ncontroller.connect();\n\n~~~~\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Ricardo de Pena\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/rdepena/node-dualshock-controller/issues"
  },
  "homepage": "https://github.com/rdepena/node-dualshock-controller",
  "_id": "dualshock-controller@0.6.7",
  "dist": {
    "shasum": "bd7f4b6ac6e51b9a11251c1314d523f2c845e988"
  },
  "_from": "dualshock-controller@",
  "_resolved": "https://registry.npmjs.org/dualshock-controller/-/dualshock-controller-0.6.7.tgz"
}
